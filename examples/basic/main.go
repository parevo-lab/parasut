package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/parevo-lab/parasut"
)

func main() {
	// Ã‡evre deÄŸiÅŸkenlerinden API bilgilerini al
	clientID := os.Getenv("PARASUT_CLIENT_ID")
	clientSecret := os.Getenv("PARASUT_CLIENT_SECRET")
	email := os.Getenv("PARASUT_EMAIL")
	password := os.Getenv("PARASUT_PASSWORD")
	companyID := 123 // Firma ID'nizi buraya yazÄ±n

	if clientID == "" || clientSecret == "" || email == "" || password == "" {
		log.Fatal("PARASUT_CLIENT_ID, PARASUT_CLIENT_SECRET, PARASUT_EMAIL ve PARASUT_PASSWORD Ã§evre deÄŸiÅŸkenlerini ayarlayÄ±n")
	}

	// Client oluÅŸtur
	config := &parasut.Config{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RedirectURL:  "urn:ietf:wg:oauth:2.0:oob",
		CompanyID:    companyID,
	}

	client := parasut.NewClient(config)

	// E-posta ve ÅŸifre ile giriÅŸ yap
	ctx := context.Background()
	err := client.SetTokenFromPassword(ctx, email, password)
	if err != nil {
		log.Fatalf("GiriÅŸ yapÄ±lamadÄ±: %v", err)
	}

	fmt.Println("âœ… BaÅŸarÄ±yla giriÅŸ yapÄ±ldÄ±!")

	// HesaplarÄ± listele
	fmt.Println("\nğŸ“‹ Hesaplar listeleniyor...")
	accounts, meta, err := client.Accounts.List(ctx, &parasut.ListParams{
		Page:     1,
		PageSize: 5,
	})
	if err != nil {
		log.Fatalf("Hesaplar listelenemedi: %v", err)
	}

	fmt.Printf("Toplam %d hesap bulundu (Sayfa %d/%d):\n", meta.TotalCount, meta.CurrentPage, meta.TotalPages)
	for _, account := range accounts {
		fmt.Printf("- %s (%s) - Bakiye: %.2f %s\n",
			account.Attributes.Name,
			account.Attributes.AccountType,
			account.Attributes.Balance,
			account.Attributes.Currency)
	}

	// MÃ¼ÅŸterileri listele
	fmt.Println("\nğŸ‘¥ MÃ¼ÅŸteriler listeleniyor...")
	contacts, meta, err := client.Contacts.List(ctx, &parasut.ListParams{
		Page:     1,
		PageSize: 5,
		Filter: map[string]string{
			"account_type": "customer",
		},
	})
	if err != nil {
		log.Fatalf("MÃ¼ÅŸteriler listelenemedi: %v", err)
	}

	fmt.Printf("Toplam %d mÃ¼ÅŸteri bulundu:\n", meta.TotalCount)
	for _, contact := range contacts {
		fmt.Printf("- %s (%s)\n", contact.Attributes.Name, contact.Attributes.Email)
	}

	// ÃœrÃ¼nleri listele
	fmt.Println("\nğŸ“¦ ÃœrÃ¼nler listeleniyor...")
	products, meta, err := client.Products.List(ctx, &parasut.ListParams{
		Page:     1,
		PageSize: 5,
	})
	if err != nil {
		log.Fatalf("ÃœrÃ¼nler listelenemedi: %v", err)
	}

	fmt.Printf("Toplam %d Ã¼rÃ¼n bulundu:\n", meta.TotalCount)
	for _, product := range products {
		fmt.Printf("- %s (%s) - Fiyat: %.2f %s\n",
			product.Attributes.Name,
			product.Attributes.Code,
			product.Attributes.ListPrice,
			product.Attributes.Currency)
	}

	// SatÄ±ÅŸ faturalarÄ±nÄ± listele
	fmt.Println("\nğŸ§¾ SatÄ±ÅŸ faturalarÄ± listeleniyor...")
	invoices, meta, err := client.SalesInvoices.List(ctx, &parasut.ListParams{
		Page:     1,
		PageSize: 5,
		Sort:     "-issue_date",
	})
	if err != nil {
		log.Fatalf("SatÄ±ÅŸ faturalarÄ± listelenemedi: %v", err)
	}

	fmt.Printf("Toplam %d satÄ±ÅŸ faturasÄ± bulundu:\n", meta.TotalCount)
	for _, invoice := range invoices {
		fmt.Printf("- %s - %s - Tutar: %.2f TL\n",
			invoice.Attributes.Description,
			invoice.Attributes.IssueDate,
			invoice.Attributes.GrossTotal)
	}

	fmt.Println("\nâœ¨ Ã–rnek tamamlandÄ±!")
}
